/*
func serverReadMessage(conn net.Conn) error {
	json, err := readJSON(conn)
	if err != nil {
		log.Print("Error reading json: ")
		return err
	}
	mapMessage, ok := json.(map[string]interface{})
	if !ok {
		return errors.New("Could not assert message type to map[string]interface{}")
	}

	signal, ok := mapMessage["signal"].(string)
	if !ok {
		return errors.New("Could assert signal type to string.")
	}

	if signal == signalConnect {
		log.Print("Request to connect received")
		connectResponse(conn)
	} else if signal == signalFlowResponse {
		log.Print("Flow response received")
	} else if signal == signalLevelResponse {
		log.Print("Level response received")
	} else if signal == signalHeartbeatResponse {
		log.Print("Heartbeat response received")
	} else {
		log.Print("unknown signal")
	}


	client version
		log.Println("data: " + strconv.Itoa(data))
		if signal == signalFlow {
			log.Print("Flow request received")
		} else if signal == signalLevel {
			log.Print("Level request received")
		} else if signal == signalHeartbeat {
			log.Print("Heartbeat received")
			if err := heartbeatResponse(conn); err != nil {
				log.Print("Error getting heartbeat response.")
				log.Println(err.Error())
				return err
			}
		} else if signal == signalConnectConfirm {
			log.Println("Successfully connected to master server.")
		} else {
			log.Print("unknown signal")
		}

	return nil

}

func deviceManager() {
	Device methods
	devices := findDevices()
	sendTestMessage(devices)
}

unused constants
	// not needed  I guess
	// signalResponse = "response"

	// Just go ahead and connect right away. Who needs security anyway?
	// signalConnect        = "connect"
	// signalConnectConfirm = "connect_confirm"

	signalFlow          = "flow"
	signalFlowResponse  = "flow_response"

	// signalLevel         = "level"
	// signalLevelResponse = "level_response"

	connectI2CDevice   = 0xFE
	connectI2CResponse = 0xFF

func connectRequest(conn net.Conn) {
	data := 123
	message := Message{"signal": signalConnect, "data": data}
	if err := writeJSON(conn, message); err != nil {
		log.Fatal(err.Error())
	}
}

func connectResponse(conn net.Conn) {
	data := 123
	message := Message{"signal": signalConnectConfirm, "data": data}
	if err := writeJSON(conn, message); err != nil {
		log.Fatal(err.Error())
	}
}

func sendMessageJSON(conn net.Conn) {
}

func sendDummyFlow(conn net.Conn) {
	data := 123
	message := Message{signalField: signalFlowResponse, dataField: data}
	if err := writeJSON(conn, message); err != nil {
		log.Print("Sending flow failed.")
	}
}
*/
